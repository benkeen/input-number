{"version":3,"sources":["webpack:///./examples/formatter.js"],"names":["getSum","str","total","split","forEach","c","num","Number","isNaN","App","state","value","render","margin","replace","width","setState","match","React","Component","ReactDOM","document","getElementById"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;;AAEA,SAASA,MAAT,CAAgBC,GAAhB,EAAqB;AACnB,MAAIC,QAAQ,CAAZ;AACAD,MAAIE,KAAJ,CAAU,EAAV,EAAcC,OAAd,CAAsB,UAACC,CAAD,EAAO;AAC3B,QAAMC,MAAMC,OAAOF,CAAP,CAAZ;;AAEA,QAAI,CAACG,MAAMF,GAAN,CAAL,EAAiB;AACfJ,eAASI,GAAT;AACD;AACF,GAND;;AAQA,SAAOJ,KAAP;AACD;;IAEKO,G;;;;;;;;;;;;wJACJC,K,GAAQ;AACNC,aAAO;AADD,K;;;gBAIRC,M,qBAAS;AAAA;;AACP,WACE;AAAA;AAAA,QAAK,OAAO,EAAEC,QAAQ,EAAV,EAAZ;AACE,kEAAC,gEAAD;AACE,sBAAc,IADhB;AAEE,mBAAW;AAAA,iBAAS,QAAKF,KAAL,EAAaG,OAAb,CAAqB,uBAArB,EAA8C,GAA9C,CAAT;AAAA;AAFb,QADF;AAKE,kEAAC,gEAAD;AACE,sBAAc,GADhB;AAEE,mBAAW;AAAA,iBAAYH,KAAZ;AAAA,SAFb;AAGE,gBAAQ;AAAA,iBAASA,MAAMG,OAAN,CAAc,GAAd,EAAmB,EAAnB,CAAT;AAAA;AAHV,QALF;AAUE,kEAAC,gEAAD;AACE,eAAO,EAAEC,OAAO,GAAT,EADT;AAEE,mBAAW;AAAA,iBACT,MAAGJ,KAAH,EAAWG,OAAX,CAAmB,uBAAnB,EAA4C,GAA5C,CADS;AAAA;AAFb,QAVF;AAiBE;AAAA;AAAA;AACE;AAAA;AAAA;AAAA;AAAA,SADF;AAEE,oEAAC,gEAAD;AACE,iBAAO,KAAKJ,KAAL,CAAWC,KADpB;AAEE,oBAAU,kBAACA,KAAD,EAAW;AAAE,mBAAKK,QAAL,CAAc,EAAEL,YAAF,EAAd;AAA2B,WAFpD;AAGE,qBAAW;AAAA,mBAAS,QAAKA,KAAL,EAAaG,OAAb,CAAqB,uBAArB,EAA8C,GAA9C,CAAT;AAAA;AAHb;AAFF,OAjBF;AA0BE;AAAA;AAAA;AACE;AAAA;AAAA;AAAA;AAAA,SADF;AAEE,oEAAC,gEAAD;AACE,wBAAc,IADhB;AAEE,qBAAW;AAAA,0BAAcH,KAAd,WAAyBX,OAAOW,KAAP,CAAzB;AAAA,WAFb;AAGE,kBAAQ;AAAA,mBAAS,CAACA,MAAMM,KAAN,CAAY,mBAAZ,KAAoC,EAArC,EAAyC,CAAzC,CAAT;AAAA;AAHV;AAFF;AA1BF,KADF;AAqCD,G;;;EA3CeC,6CAAKA,CAACC,S;;AA8CxBC,iDAAQA,CAACR,MAAT,CAAgB,4DAAC,GAAD,OAAhB,EAAyBS,SAASC,cAAT,CAAwB,iBAAxB,CAAzB,E","file":"examples/formatter.js","sourcesContent":["/* eslint no-console:0 */\nimport 'rc-input-number/assets/index.less';\nimport InputNumber from 'rc-input-number';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nfunction getSum(str) {\n  let total = 0;\n  str.split('').forEach((c) => {\n    const num = Number(c);\n\n    if (!isNaN(num)) {\n      total += num;\n    }\n  });\n\n  return total;\n}\n\nclass App extends React.Component {\n  state = {\n    value: 1000,\n  };\n\n  render() {\n    return (\n      <div style={{ margin: 10 }}>\n        <InputNumber\n          defaultValue={1000}\n          formatter={value => `$ ${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\n        />\n        <InputNumber\n          defaultValue={100}\n          formatter={value => `${value}%`}\n          parser={value => value.replace('%', '')}\n        />\n        <InputNumber\n          style={{ width: 100 }}\n          formatter={value =>\n            `${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')\n          }\n        />\n\n        <div>\n          <h1>In Control</h1>\n          <InputNumber\n            value={this.state.value}\n            onChange={(value) => { this.setState({ value }); }}\n            formatter={value => `$ ${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\n          />\n        </div>\n\n        <div>\n          <h1>Strange Format</h1>\n          <InputNumber\n            defaultValue={1000}\n            formatter={value => `$ ${value} - ${getSum(value)}`}\n            parser={value => (value.match(/^\\$ ([\\d\\.]*) .*$/) || [])[1]}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('__react-content'));\n\n\n\n// WEBPACK FOOTER //\n// ./examples/formatter.js"],"sourceRoot":""}